/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import Logica.controladorCliente;
import Logica.fabricaElGuardian;
import Logica.mascota;
import Logica.raza;
import Logica.utilidades;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JDesktopPane;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author jp
 */
public class JIF_animalAlta extends javax.swing.JInternalFrame {
//////////////////VARIABLES//////////////////////////

    JFileChooser navegadorArchivos = new JFileChooser();
    private BufferedImage fotoMascota;
    private JDesktopPane escritorio;
    private controladorCliente contC = (controladorCliente) fabricaElGuardian.getInstance().getInstanceIControladorCliente();
    private utilidades util = utilidades.getInstance();
    private DefaultListModel modelo = null;
    private HashMap<String, String> clientes = new HashMap<>();
    String rutaFoto = contC.getRutaFotoImagenesMascotaLevantar();
    int opcion2;
    JIF_clientesAlta ca2;
    String rutaDestino = contC.getRutaFotoImagenesWeb();
///////////////GET-SET////////////////

    public HashMap<String, String> getClientes() {
        return clientes;
    }

    public void setClientes(HashMap<String, String> clientes) {
        this.clientes = clientes;
    }

    public DefaultListModel getModelo() {
        return modelo;
    }

    public void setModelo(DefaultListModel modelo) {
        this.modelo = modelo;
    }

    /**
     * Creates new form JIF_animalAlta
     */
    JIF_animalAlta(JDesktopPane escritorioRecibido, int opcion, JIF_clientesAlta ca) {
        this.escritorio = escritorioRecibido;
        initComponents();
        this.btn_Agregar.setVisible(false);
        opcion2 = opcion;
        if (ca != null) {
            ca2 = ca;
        }
        if (opcion == 0) {
            this.jPanel1.remove(this.btn_aceptar);
            this.jPanel1.remove(this.jComboClientes);
            this.jPanel1.remove(this.jLabel1);
            this.btn_Agregar.setVisible(true);
        }
        cargarRazas();
        cargarComboClientes();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        JLab_nomMascota = new javax.swing.JLabel();
        JText_nomMascota = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListRaza = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        JLab_descripcion = new javax.swing.JLabel();
        btn_foto = new javax.swing.JButton();
        JLAB_foto = new javax.swing.JLabel();
        btn_aceptar = new javax.swing.JButton();
        btn_cancelar = new javax.swing.JButton();
        jText_buscarRaza = new javax.swing.JTextField();
        jComboClientes = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        btn_Agregar = new javax.swing.JButton();

        jLabel1.setText("Cliente:");

        JLab_nomMascota.setText("Nombre Mascota:");

        jLabel2.setText("Raza:");

        jListRaza.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jListRaza);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        JLab_descripcion.setText("Descripcion:");

        btn_foto.setText("Foto Mascota");
        btn_foto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_fotoActionPerformed(evt);
            }
        });

        JLAB_foto.setText("FOTO");

        btn_aceptar.setText("Aceptar");
        btn_aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_aceptarActionPerformed(evt);
            }
        });

        btn_cancelar.setText("Cancelar");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        jText_buscarRaza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jText_buscarRazaActionPerformed(evt);
            }
        });
        jText_buscarRaza.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jText_buscarRazaKeyTyped(evt);
            }
        });

        jComboClientes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Buscar Raza:");

        btn_Agregar.setText("Agregar");
        btn_Agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AgregarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(JLab_nomMascota)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(JLab_descripcion)
                        .addGap(35, 35, 35)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JText_nomMascota, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jText_buscarRaza, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(91, 91, 91)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(btn_Agregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_aceptar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_cancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(JLAB_foto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_foto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 77, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_foto))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JLab_nomMascota)
                            .addComponent(JText_nomMascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jText_buscarRaza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(jLabel2))))
                    .addComponent(JLAB_foto, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(JLab_descripcion)
                        .addGap(54, 54, 54))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_aceptar)
                        .addComponent(btn_cancelar)
                        .addComponent(btn_Agregar)))
                .addGap(0, 37, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jText_buscarRazaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jText_buscarRazaKeyTyped
        buscar(jText_buscarRaza);
    }//GEN-LAST:event_jText_buscarRazaKeyTyped

    private void btn_fotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_fotoActionPerformed
        selecImagen();        // TODO add your handling code here:
    }//GEN-LAST:event_btn_fotoActionPerformed

    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
        limpiar();
        recargarMascota();
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void btn_aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_aceptarActionPerformed

        try {
            altaMascota();
        } catch (IOException ex) {
            Logger.getLogger(JIF_animalAlta.class.getName()).log(Level.SEVERE, null, ex);
        }
        JIF_animal mp = new JIF_animal(escritorio);
        this.escritorio.add(mp);
        mp.setVisible(true);
        mp.toFront();
        this.setVisible(false);
    }//GEN-LAST:event_btn_aceptarActionPerformed

    private void jText_buscarRazaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jText_buscarRazaActionPerformed

    }//GEN-LAST:event_jText_buscarRazaActionPerformed

    private void btn_AgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AgregarActionPerformed
        try {
            mascota m = this.construirMascota();
            this.contC.obtenerMascotaCliente().add(m);
            JOptionPane.showMessageDialog(this, "Mascota agregada con exito");
            ca2.cargarListaAnimal();
            this.setVisible(false);
        } catch (IOException ex) {
            Logger.getLogger(JIF_animalAlta.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_AgregarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLAB_foto;
    private javax.swing.JLabel JLab_descripcion;
    private javax.swing.JLabel JLab_nomMascota;
    private javax.swing.JTextField JText_nomMascota;
    private javax.swing.JButton btn_Agregar;
    private javax.swing.JButton btn_aceptar;
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JButton btn_foto;
    private javax.swing.JComboBox<String> jComboClientes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jListRaza;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jText_buscarRaza;
    // End of variables declaration//GEN-END:variables

    ///////////funciones///////////
    public void cargarRazas() {
        List<String> razasApiRest = contC.getRazasDB();
        DefaultListModel dlm = new DefaultListModel();
        for (String raza : razasApiRest) {
            dlm.addElement(raza);
        }

        jListRaza.setModel(dlm);

        this.setModelo(dlm);
    }

    private void buscar(JTextField jtxt) {

        DefaultListModel modeln = (DefaultListModel) util.filtrarJList(jtxt.getText(), this.getModelo());
        jListRaza.setModel(modeln);
    }

    private void limpiar() {
        jText_buscarRaza.setText(null);
        jTextArea1.setText(null);
        jComboClientes.setSelectedIndex(0);
        jListRaza.clearSelection();
        JText_nomMascota.setText(null);
        JLAB_foto.setIcon(null);
    }

    private void cargarComboClientes() {
        clientes = (HashMap<String, String>) contC.getClientesMascota();
        Iterator<String> it = clientes.keySet().iterator();
        JComboBox combo = new JComboBox<String>();

        combo.addItem("Seleccionar Cliente");

        while (it.hasNext()) {
            String key = it.next();
            combo.addItem(key + "-" + (String) clientes.get(key));
        }
        jComboClientes.setModel(combo.getModel());
    }

    private void selecImagen() {
        BufferedImage image = util.levantarImagen(JText_nomMascota);
        JLAB_foto.setIcon(new ImageIcon(image));
        System.out.println(JLAB_foto.getWidth() + "//" + JLAB_foto.getHeight());
        Image scaledInstance = image.getScaledInstance(JLAB_foto.getWidth(), JLAB_foto.getHeight(), Image.SCALE_DEFAULT);
        JLAB_foto.setIcon(new ImageIcon(scaledInstance));
        fotoMascota = image;

    }

    private boolean validarDatos() {
        if (JText_nomMascota.getText() == null) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un nombre para la mascota!");
            JText_nomMascota.requestFocus();
            JText_nomMascota.selectAll();
            return false;
        }
        if (jListRaza.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una raza para la mascota!");
            jListRaza.requestFocus();
            return false;
        }
        if (jComboClientes.getSelectedIndex() <= 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un cliente!");
            jComboClientes.requestFocus();
            return false;
        }

        return true;

    }

    private void altaMascota() throws IOException {
        if (validarDatos()) {
            int res = JOptionPane.showConfirmDialog(this, "Desea dar de alta la mascota: " + JText_nomMascota.getText() + " ?");
            if (res == 0) {
                boolean altaAnimal = contC.altaAnimal(this.construirMascota());
                if (altaAnimal) {
                    if (fotoMascota != null) {
                        util.salvarImagen(fotoMascota, rutaFoto, util.generarNombreFoto(JText_nomMascota.getText(), contC.getCliente(this.getId()).getTel_cel()), 0);
                        this.util.copiarArchivo(this.rutaFoto + util.generarNombreFoto(JText_nomMascota.getText(), contC.getCliente(this.getId()).getTel_cel() + ".png"), this.rutaDestino + util.generarNombreFoto(JText_nomMascota.getText(), contC.getCliente(this.getId()).getTel_cel() + ".png"));
                    }
                    JOptionPane.showMessageDialog(this, "La mascota: " + JText_nomMascota.getText() + " fue dada de alta con exito!");
                    limpiar();
                }

            }
        }
    }

    private mascota construirMascota() throws IOException {
        mascota msctNew = new mascota();
        msctNew.setNombre(JText_nomMascota.getText());
        if (!jTextArea1.getText().isEmpty()) {
            msctNew.setDescripcion(jTextArea1.getText());
        } else {
            msctNew.setDescripcion("");
        }
        if (fotoMascota != null) {
            if (opcion2 == 0) {
                msctNew.setFoto(util.generarNombreFoto(JText_nomMascota.getText(), "") + ".png");
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(fotoMascota, "png", baos);
                baos.flush();
                byte[] imageInByte = baos.toByteArray();
                baos.close();
                msctNew.setFoto2(imageInByte);
            } else {
                msctNew.setFoto(util.generarNombreFoto(JText_nomMascota.getText(), contC.getCliente(this.getId()).getTel_cel()) + ".png");
            }
        } else {
            msctNew.setFoto("default.png");
        }
        msctNew.setRaza((raza) contC.getRaza((String) jListRaza.getSelectedValue()));
        int index = jComboClientes.getSelectedIndex();
        String cortar1 = jComboClientes.getItemAt(index);
        if (opcion2 != 0) {
            msctNew.setCliente(contC.getCliente(this.getId()));
        }
        return msctNew;
    }

    private String getId() {
        String id = null;
        int index = jComboClientes.getSelectedIndex();
        String cortar1 = jComboClientes.getItemAt(index);
        String[] split = cortar1.split("-");
        id = split[0];
        return id;

    }

    private String generarNombreFoto() {
        String nombre;
        nombre = "MASCOTA" + JText_nomMascota.getText() + "CLIENTE" + contC.getCliente(this.getId()).getTel_cel();
        return nombre;
    }

    private void recargarMascota() {
        JInternalFrame[] allFrames = this.escritorio.getAllFrames();
        for (JInternalFrame jif : allFrames) {
            if (jif instanceof JIF_animal) {
                JIF_animal animal = (JIF_animal) jif;
                animal.cargarMascotas();
            }
        }
    }

}
