/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import Logica.ControladorReservas;
import Logica.banio;
import Logica.cliente;
import Logica.controladorCliente;
import Logica.controladorServicios;
import Logica.esquila;
import Logica.mascota;
import Logica.paseo;
import Logica.reserva;
import Logica.servicio;
import Logica.tipoBanio;
import Logica.tipoEsquila;
import Logica.turno;
import Logica.utilidades;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import javax.accessibility.Accessible;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JDesktopPane;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jp
 */
public class JIF_modificarReserva extends javax.swing.JInternalFrame {
/////variables

    private final JDesktopPane escritorio;
    private final long idReserva;
    private Long idMascota;
    private controladorCliente contC = controladorCliente.getInstance();
    private ControladorReservas contRes = ControladorReservas.getInstance();
    private utilidades util = utilidades.getInstance();
    private cliente cliente = null;
    private List<mascota> mascotasCli = new ArrayList<>();
    private mascota mascotaCliente = null;
    List<turno> turnosDisponibles = new ArrayList<>();
    private List<String> serviciosLista = new ArrayList<>();
    private controladorServicios contSrv = controladorServicios.getInstance();
    ArrayList<Object> listaBanios = new ArrayList<>();
    ArrayList<Object> listaEsquilas = new ArrayList<>();
    private HashMap<String, servicio> listaServicios = new HashMap<>();
    private String idCliente;
    private String[] turnosArreglo;
    private String turnoString;
    private int indiceTurnos;
    private reserva reservaCliente;
/////////////////

    /**
     * Creates new form JIF_modificarReserva
     */
    public JIF_modificarReserva(JDesktopPane escritorioViene, long idReserva) {
        this.escritorio = escritorioViene;
        this.idReserva = 1;
        initComponents();
        inicio();
    }

    private void controlJDATE() {

        Date min = util.getFechaActual();//fecha minima
        Date max = utilidades.sumaRestaDias(util.getFechaActual(), 7);//fecha maxima 7 dias a partir de la actual
        JDTFechaReserva.getDateEditor().setEnabled(false);//desabilito el jtext editor
        JDTFechaReserva.setMaxSelectableDate(max);//seteo ma fecha maxima
        JDTFechaReserva.setMinSelectableDate(min);//seteo la fecha minima
        //en este evento se le pueden agregar llamadas a opciones mentodos etc que se ejecutan cuando cambia la fecha (uso la interfaz lambda)
        /* JDTFechaReserva.getDateEditor().addPropertyChangeListener((PropertyChangeEvent e) -> {
            JOptionPane.showMessageDialog(rootPane, "la fecha es " + JDTFechaReserva.getDate());
        // btn_turno.setEnabled(false);
        });*/

    }

    public cliente getCliente() {
        return cliente;
    }

    public void setCliente(cliente cliente) {
        this.cliente = cliente;
    }

    private void inicio() {
        jtxt_descripcion.setText("");
        DefaultListModel limpio = new DefaultListModel();
        jList_Tipo.setModel(limpio);
        jList_servicio.setModel(limpio);
        // SpinnerModel nnmodel = new SpinnerNumberModel(0, 0, 5, 1);//creo un modelo con los numeros
        /*  jSpinnerDuracion.setModel(nnmodel);
        JSpinner.DefaultEditor defaultEditor = new JSpinner.DefaultEditor(new JSpinner(nnmodel));
        jSpinnerDuracion.setEditor(defaultEditor);
        jSpinnerDuracion.setEditor(new JSpinner.DefaultEditor(new JSpinner(nnmodel)));//seteo un editor con mi modelo, esto es para que no pueda editar
         */  //      cargarTurnosDisponibles();//carga los turnos
        controlJDATE();
        cargarServiciosList();//carga los servicios la lista
        contSrv.cargarTiposServicios();//carga los tipos de servicios
        cargarReserva();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jlabClientes = new javax.swing.JLabel();
        Jlab_foto = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLab_idMascota = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTabla_mascotas = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList_servicio = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList_Tipo = new javax.swing.JList<>();
        btn_nuevoTipo = new javax.swing.JButton();
        btn_cancelar = new javax.swing.JButton();
        btn_aceptar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtxt_descripcion = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabIdCliente = new javax.swing.JLabel();
        btn_turno = new javax.swing.JButton();
        JDTFechaReserva = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jlabelTurno = new javax.swing.JLabel();
        jlabelTurno1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        jLabel7.setText("jLabel7");

        jlabClientes.setText("Cliente:");

        Jlab_foto.setText("Foto");

        jLabel1.setText("Mascota");

        jLab_idMascota.setText("id");

        jTabla_mascotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTabla_mascotas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabla_mascotasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTabla_mascotas);

        jList_servicio.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList_servicio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList_servicioMouseClicked(evt);
            }
        });
        jList_servicio.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jList_servicioPropertyChange(evt);
            }
        });
        jScrollPane4.setViewportView(jList_servicio);

        jLabel5.setText("Servicio");

        jLabel6.setText("Tipo");

        jList_Tipo.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(jList_Tipo);

        btn_nuevoTipo.setText("Nuevo Tipo");
        btn_nuevoTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_nuevoTipoActionPerformed(evt);
            }
        });

        btn_cancelar.setText("Cancelar");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        btn_aceptar.setText("Aceptar");
        btn_aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_aceptarActionPerformed(evt);
            }
        });

        jtxt_descripcion.setColumns(20);
        jtxt_descripcion.setRows(5);
        jScrollPane3.setViewportView(jtxt_descripcion);

        jLabel3.setText("Descripcion");

        jLabel2.setText("Turno");

        jLabIdCliente.setText("idCliente");

        btn_turno.setText("Seleccionar Turno");
        btn_turno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_turnoActionPerformed(evt);
            }
        });

        jLabel4.setText("Fecha:");

        jlabelTurno.setText("TURNO");

        jlabelTurno1.setText("TURNO");

        jLabel8.setText("Imagen de la Mascota");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jLabIdCliente)
                        .addGap(39, 39, 39)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLab_idMascota)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Jlab_foto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)))
                        .addGap(42, 42, 42))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlabelTurno)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addGap(52, 52, 52)
                            .addComponent(JDTFechaReserva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btn_turno, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jlabelTurno1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane5)
                    .addComponent(btn_nuevoTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_aceptar)
                        .addGap(54, 54, 54)
                        .addComponent(btn_cancelar)))
                .addGap(136, 136, 136))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jlabClientes)
                    .addContainerGap(858, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabIdCliente))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLab_idMascota)
                            .addComponent(jLabel1))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(JDTFechaReserva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel2)
                                            .addComponent(btn_turno))
                                        .addGap(18, 18, 18)
                                        .addComponent(jlabelTurno)
                                        .addGap(18, 18, 18)
                                        .addComponent(jlabelTurno1))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel5))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btn_nuevoTipo))
                                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btn_aceptar)
                                    .addComponent(btn_cancelar)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Jlab_foto, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(26, 26, 26)
                    .addComponent(jlabClientes)
                    .addContainerGap(473, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabla_mascotasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabla_mascotasMouseClicked
        int row = jTabla_mascotas.rowAtPoint(evt.getPoint());
        this.seleccionarMascota((Long) jTabla_mascotas.getValueAt(row, 0));
        this.idMascota = (Long) jTabla_mascotas.getValueAt(row, 0);
        // TODO add your handling code here:
    }//GEN-LAST:event_jTabla_mascotasMouseClicked

    private void jList_servicioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList_servicioMouseClicked
        cargarListTipoSrv(jList_servicio.getSelectedValue());           //  cargarListTipoSrv(jList_servicio.getSelectedValue());        // TODO add your handling code here:
    }//GEN-LAST:event_jList_servicioMouseClicked

    private void btn_nuevoTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_nuevoTipoActionPerformed
        JIF_esquilaBaño esqBan = new JIF_esquilaBaño(this.escritorio);
        this.escritorio.add(esqBan);
        esqBan.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_nuevoTipoActionPerformed

    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void btn_aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_aceptarActionPerformed
        int res = JOptionPane.showConfirmDialog(this, "Desea modificar la reserva?");
        if (res == 0) {
            modificarReserva();
            this.setVisible(false);
        }
    }//GEN-LAST:event_btn_aceptarActionPerformed

    private void btn_turnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_turnoActionPerformed
        Object showInputDialog = JOptionPane.showInputDialog(this, "Seleccione un turno:", "Turnos", JOptionPane.DEFAULT_OPTION, null, this.turnosArreglo, turnosArreglo[this.indiceTurnos]);
        this.turnoString = (String) showInputDialog;
        this.jlabelTurno.setText((String) showInputDialog);        // TODO add your handling code here:
    }//GEN-LAST:event_btn_turnoActionPerformed

    private void jList_servicioPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jList_servicioPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jList_servicioPropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser JDTFechaReserva;
    private javax.swing.JLabel Jlab_foto;
    private javax.swing.JButton btn_aceptar;
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JButton btn_nuevoTipo;
    private javax.swing.JButton btn_turno;
    private javax.swing.JLabel jLabIdCliente;
    private javax.swing.JLabel jLab_idMascota;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList<String> jList_Tipo;
    private javax.swing.JList<String> jList_servicio;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTabla_mascotas;
    private javax.swing.JLabel jlabClientes;
    private javax.swing.JLabel jlabelTurno;
    private javax.swing.JLabel jlabelTurno1;
    private javax.swing.JTextArea jtxt_descripcion;
    // End of variables declaration//GEN-END:variables

    /////////////////////////////////////////////////////funnciones///////////////////////////////////////////
    private void cargarReserva() {
        reserva r = (reserva) contRes.getReserva(this.idReserva);
        this.reservaCliente = r;
        this.cliente = (cliente) r.getCliente();
        cargarMascotasCliente(contC.obtenerMascotasCliente(this.cliente));
        cargarMascotaReserva(r.getMascota());
        this.mascotasCli = (List) contC.obtenerMascotasCliente(this.cliente);
        jLabIdCliente.setText((String) r.getCliente().getCorreo());
        jtxt_descripcion.setText(r.getDescripcion());
        this.mascotaCliente = (mascota) r.getMascota();
        cargarTurnosDisponibles((List) r.getTurno(), util.DateAString(r.getFechaReserva(), "yyyy-MM-dd"));
        cargarServicioCliente(r.getServicio());
        JDTFechaReserva.setDate(r.getFechaReserva());
    }

    private void cargarMascotasCliente(List<mascota> mascotasCliente) {
        if (!mascotasCliente.isEmpty()) {

            String[] filtro = {"Cliente"};
            List<String> cabeceras = util.filtrarPalabras((String[]) util.cabeceras(mascotasCliente.get(0)), filtro);
            DefaultTableModel dtm = new DefaultTableModel(cabeceras.toArray(), 0);
            for (mascota m : mascotasCliente) {
                Object[] data = {m.getId(), m.getNombre(), m.getRaza().getRaza(), m.getDescripcion()};
                dtm.addRow(data);
            }
            jTabla_mascotas.setModel(dtm);
        } else {
            jTabla_mascotas.setEnabled(false);
        }
    }

    private void cargarTurnosDisponibles(List turnosCliente, String fecha) {
        int numTurno = 0;
        if (!turnosCliente.isEmpty()) {
            for (Object turnoCliente : turnosCliente) {
                this.turnosDisponibles = (List<turno>) getTurnosSumaEldelCLiente(contRes.getTurnos(fecha), (turno) turnoCliente);
            }
        }

        this.turnosArreglo = new String[turnosDisponibles.size() + 1];
        turnosArreglo[numTurno] = "Seleccionar Turno";
        Iterator it = turnosDisponibles.iterator();
        numTurno++;
        while (it.hasNext()) {
            turno name = (turno) it.next();

            turnosArreglo[numTurno] = ("Turno: " + numTurno + " -- " + name.getHora() + " Hs");
            numTurno++;
        }
        generarLabelConTurnos((List) turnosCliente);
    }

    private ArrayList<turno> getTurnosSumaEldelCLiente(List<turno> turnos, turno turnoClie) {
        ArrayList<turno> ListTurnos = new ArrayList<>();

        if (turnos.size() > 0) {
            if (!contieneTurno(turnoClie, turnos)) {

                ListTurnos.addAll(agregaTurnoEnOrden(turnos, turnoClie));
            }
        } else {
            ListTurnos.add(turnoClie);
        }

        return ListTurnos;
    }

    private List<turno> agregaTurnoEnOrden(List<turno> turnos, turno turnoClie) {
        try {

            Iterator it = turnos.iterator();

            while (it.hasNext()) {
                turno tur = (turno) it.next();
                int horaTL = parsearHora(tur.getHora());
                int horaTC = parsearHora(turnoClie.getHora());
                if (horaTL > horaTC) {
                    int indice = turnos.indexOf(it.next());
                    turnos.add(indice - 1, turnoClie);
                }
            }
        } catch (Exception e) {

            System.err.print("Error: " + e.getMessage() + "CAUSA:" + e.getCause());
        }

        return turnos;
    }

    /**
     * Funcioon que valida la exsitencia de un turno en el arreglo de turnos en
     * caso que el arreglo este vacio o no existe el turno retorna false
     *
     * @param turnClie
     * @param turnosSis
     * @return true or false
     */
    private boolean contieneTurno(turno turnClie, List<turno> turnosSis) {
        if (!turnosSis.isEmpty()) {
            for (turno tur : turnosSis) {
                if (tur.getHora().equals(turnClie.getHora())) {
                    return true;
                }

            }

        }
        return false;
    }

    private String obtenerHora(String valorCombo) {
        String[] corte1 = valorCombo.split(" -- ");
        String[] corteFInal = corte1[1].split(" ");
        return corteFInal[0];

    }

    private int parsearHora(String cadena) {
        String[] split = cadena.split(":");
        return Integer.parseInt(split[0]);
    }

    private void cargarServiciosList() {
        DefaultListModel modeloListaSer = (DefaultListModel) new DefaultListModel();
        modeloListaSer.addElement("Baño");
        modeloListaSer.addElement("Esquila");
        modeloListaSer.addElement("Paseo");
        jList_servicio.setModel(modeloListaSer);
    }

    private void cargarListTipoSrv(String selectedValue) {
        if (selectedValue.equals("Baño")) {

            listaBanios = (ArrayList<Object>) contSrv.getServiciosXtipo("BANIO");
            modeloBanio(listaBanios);

        }
        if (selectedValue.equals("Esquila")) {

            listaEsquilas = (ArrayList<Object>) contSrv.getServiciosXtipo("ESQUILA");
            modeloEsquila(listaEsquilas);

        }

        if (selectedValue.equals("Paseo")) {
            DefaultListModel dflmd = new DefaultListModel();
            dflmd.addElement("Paseo");
            jList_Tipo.setModel(dflmd);
        }
    }

    private void modeloEsquila(List listOBJ) {
        DefaultListModel newModel = new DefaultListModel();
        if (listOBJ != null) {

            for (Object obj : listOBJ) {
                newModel.addElement(((tipoEsquila) obj).getTipoEsquila());
            }
            jList_Tipo.setModel(newModel);
        } else {
            newModel.addElement("N/A tipoEsquila");
            jList_Tipo.setModel(newModel);
        }
    }

    private void modeloBanio(List listOBJ) {
        DefaultListModel newModel = new DefaultListModel();
        if (listOBJ != null) {

            for (Object obj : listOBJ) {
                newModel.addElement(((tipoBanio) obj).getTipoBanio());
            }
            jList_Tipo.setModel(newModel);
        } else {
            newModel.addElement("N/A tipoBaño");
            jList_Tipo.setModel(newModel);
        }

    }

    private void cargarServicioCliente(servicio servicio) {
        try {

            if (servicio instanceof banio) {
                jList_servicio.setSelectedValue("Baño", true);
                banio ban = (banio) servicio;
                cargarListTipoSrv("Baño");
                jList_Tipo.setSelectedValue(ban.getTipoDeBanio().getTipoBanio(), true);

            }
            if (servicio instanceof esquila) {
                jList_servicio.setSelectedValue("Esquila", false);
                esquila esq = (esquila) servicio;
                cargarListTipoSrv("Esquila");
                jList_Tipo.setSelectedValue(esq.getTipoDeEsquila().getTipoEsquila(), true);

            }
            if (servicio instanceof paseo) {
                jList_servicio.setSelectedValue("Paseo", true);
                cargarListTipoSrv("Paseo");
                jList_Tipo.setSelectedValue("Paseo", true);
            }

        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage() + " Causa: " + e.getCause());
        }

    }

    private void generarLabelConTurnos(List turnos) {
        List<String> listaEtiquetas = new ArrayList<>();

        if (!turnos.isEmpty()) {
            for (int i = 1; i < this.turnosArreglo.length; i++) { //posicion 0 = "Seleccionar Turno"
                for (Object t : turnos) {
                    int horaTurnos = parsearHora(obtenerHora(turnosArreglo[i]));
                    int horacliente = parsearHora(((turno) t).getHora());
                    if (horaTurnos == horacliente) {
                        listaEtiquetas.add(turnosArreglo[i]);
                        this.indiceTurnos = i;

                    }
                }
            }
            if (listaEtiquetas.size() == 1) {
                jlabelTurno.setText(listaEtiquetas.get(0));
            }
            if (listaEtiquetas.size() == 2) {
                jlabelTurno.setText(listaEtiquetas.get(0));
                jlabelTurno1.setText(listaEtiquetas.get(1));
            }

        }
    }

    private boolean validarDatos() {

        if (this.idMascota == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una mascota!");
            jTabla_mascotas.requestFocus(true);
            return false;
        }
        if (JDTFechaReserva.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una Fecha!");
            JDTFechaReserva.requestFocus(true);
            return false;
        }
        if (jList_servicio.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un servicio!");
            jList_servicio.requestFocus();
            return false;
        }
        if (jList_servicio.getSelectedValue().equals("Baño")) {
            if (jList_Tipo.getSelectedValue() == null) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar un tipo de baño!");
                jList_Tipo.requestFocus(true);
                return false;
            }
        }
        if (jList_servicio.getSelectedValue().equals("Esquila")) {
            if (jList_Tipo.getSelectedValue() == null) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar un tipo de esquila!");
                jList_Tipo.requestFocus(true);
                return false;
            }
        }
        if (this.turnoString == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un turno!");
            btn_turno.requestFocus(true);
            return false;
        }

        return true;
    }

    private void seleccionarMascota(Long id) {
        this.mascotaCliente = (mascota) this.getMascota(id);
        cargarFoto(this.mascotaCliente);
        jLab_idMascota.setText(String.valueOf(id));
    }

    private mascota getMascota(Long id) {

        for (mascota msc : this.mascotasCli) {
            if (msc.getId().compareTo(id) == 0) {
                return msc;
            }

        }

        return null;
    }

    private void cargarFoto(mascota mascotaCliente) {
        if (!mascotaCliente.getFoto().equals("N/A")) {
            BufferedImage image = (BufferedImage) util.dameEstaImagen(contC.getRutaFotoImagenesMascotaLevantar() + mascotaCliente.getFoto());
            Image scaledInstance = image.getScaledInstance(200, 180, Image.SCALE_DEFAULT);
            Jlab_foto.setIcon(new ImageIcon(scaledInstance));
            Jlab_foto.setText(null);
        }
    }

    private void cargarMascotaReserva(mascota mascota) {
        jLab_idMascota.setText(String.valueOf(mascota.getId()));
        this.idMascota = mascota.getId();
        cargarFoto(mascota);
    }

    private turno getTurno(String hora) {
        turno tr = null;
        for (turno turD : this.turnosDisponibles) {
            if (turD.getHora().equals(hora)) {
                tr = turD;
            }

        }
        return tr;
    }

    private void modificarReserva() {
        if (validarDatos()) {

            if ((!reservaCliente.getDescripcion().equals(jtxt_descripcion.getText())) && (!jtxt_descripcion.getText().isEmpty())) {
                reservaCliente.setDescripcion(jtxt_descripcion.getText());
            }
            if (!reservaCliente.getFechaReserva().equals(JDTFechaReserva.getDate()) && JDTFechaReserva.getDate() != null) {
                reservaCliente.setFechaReserva(JDTFechaReserva.getDate());
            }
            if (!reservaCliente.getTurno().get(0).equals(getTurno(obtenerHora(this.turnoString))) && this.turnoString != null) {
                reservaCliente.setTurno(getTurno(obtenerHora(this.turnoString)));
            }
            if (!reservaCliente.getMascota().getId().equals(this.idMascota) && this.idMascota != null) {
                this.reservaCliente.setMascota(getMascota(this.idMascota));
            }
            if (!reservaCliente.getServicio().getTipo().equals(jList_Tipo.getSelectedValue())) {
                this.reservaCliente.setServicio((servicio) crearServicio());
            }
            if (contRes.modificarReserva(this.reservaCliente)) {
                JOptionPane.showMessageDialog(this, "Se modifico la reserva!");
                limpiar();
            }
        }
    }

    private servicio crearServicio() {

        try {
            if (jList_servicio.getSelectedValue().equals("Baño")) {
                System.out.println("Creo un banio");
                banio nuevoServicio = new banio();
                nuevoServicio.setDescripcion("Descripcion: " + jtxt_descripcion.getText()
                        + " Descripcion Tipo Servicio: " + getTipoBanio().getDescripcion());

                nuevoServicio.setTipoDeBanio(getTipoBanio());
                nuevoServicio.setPrecio(getTipoBanio().getPrecio());
                System.out.println("Retorno el banio");
                return nuevoServicio;

            }
            if (jList_servicio.getSelectedValue().equals("Esquila")) {
                System.out.println("Creo un esquila");
                esquila nuevoServicio = new esquila();
                nuevoServicio.setDescripcion("Descripcion: " + jtxt_descripcion.getText()
                        + " Descripcion Tipo Servicio: " + getTipoEsquila().getDescripcion());

                nuevoServicio.setTipoDeEsquila(getTipoEsquila());
                nuevoServicio.setPrecio(getTipoEsquila().getPrecio());
                System.out.println("Retorno el esquila");
                return nuevoServicio;

            }
            if (jList_servicio.getSelectedValue().equals("Paseo")) {
                System.out.println("Creo un paseo");
                paseo nuevoServicio = new paseo();

                nuevoServicio.setPrecio(getPrecioActualPaseo());
                nuevoServicio.setDescripcion("Descripcion: " + jtxt_descripcion.getText());
                System.out.println("Retorno el paseo");
                return nuevoServicio;
            }

        } catch (Exception e) {
            System.err.println(e.getMessage());

        }
        return null;
    }

    private tipoBanio getTipoBanio() {
        tipoBanio tpBanio = null;
        String tipoSrv = jList_Tipo.getSelectedValue();
        String servicio = jList_servicio.getSelectedValue();
        if (servicio.equals("Baño")) {
            Iterator it = listaBanios.iterator();
            while (it.hasNext()) {
                Object next = it.next();
                if (((tipoBanio) next).getTipoBanio().equals(tipoSrv)) {
                    tpBanio = (tipoBanio) next;
                }
            }
        }
        return tpBanio;
    }

    private tipoEsquila getTipoEsquila() {
        tipoEsquila tpEsquila = null;
        String tipoSrv = jList_Tipo.getSelectedValue();
        String servicio = jList_servicio.getSelectedValue();

        if (servicio.equals("Esquila")) {
            Iterator it = listaEsquilas.iterator();
            while (it.hasNext()) {
                Object next = it.next();
                if (((tipoEsquila) next).getTipoEsquila().equals(tipoSrv)) {
                    tpEsquila = (tipoEsquila) next;
                }
            }
        }
        return tpEsquila;
    }

    private float getPrecioActualPaseo() {
        return (float) contSrv.getPrecioPaseo();
    }

    private void limpiar() {
        System.out.print("Limpiame todoooo");
        JDTFechaReserva.setDate(new Date());
        inicio();

    }
}
